#Lightning datatable with Button


```
##HTML
<template>
    <lightning-card title="Add Buttons In LWC Datatable Salesforce" icon-name="standard:account">
        <template if:true={data}>
            <lightning-datatable key-field="Id" data={data} columns={columns} hide-checkbox-column="true"
                show-row-number-column="true" onrowaction={callRowAction}>
            </lightning-datatable>
        </template>
        <template if:true={error}>
            {error}>
        </template>
    </lightning-card>
</template>
```

```
##JS

import { LightningElement, track, wire } from 'lwc';
import getAccounts from '@salesforce/apex/AccountDataController.getAccounts';
import { NavigationMixin } from 'lightning/navigation';
import { deleteRecord } from 'lightning/uiRecordApi';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import { refreshApex } from '@salesforce/apex';

const columns = [
    { label: 'Name', fieldName: 'Name' },
    { label: 'Phone', fieldName: 'Phone' },
    { label: 'Type', fieldName: 'Type' },
    { label: 'Rating', fieldName: 'Rating' },
    {
        type: "button", label: 'View', initialWidth: 100, typeAttributes: {
            label: 'View',
            name: 'View',
            title: 'View',
            disabled: false,
            value: 'view',
            iconPosition: 'left',
            iconName:'utility:preview',
            variant:'Brand'
        }
    },
    {
        type: "button", label: 'Edit', initialWidth: 100, typeAttributes: {
            label: 'Edit',
            name: 'Edit',
            title: 'Edit',
            disabled: false,
            value: 'edit',
            iconPosition: 'left',
            iconName:'utility:edit',
            variant:'Brand'
        }
    },
    {
        type: "button", label: 'Delete', initialWidth: 110, typeAttributes: {
            label: 'Delete',
            name: 'Delete',
            title: 'Delete',
            disabled: false,
            value: 'delete',
            iconPosition: 'left',
            iconName:'utility:delete',
            variant:'destructive'
        }
    }
];

export default class ButtonsInLWC extends NavigationMixin(LightningElement) {
    @track data;
    @track wireResult;
    @track error;
    columns = columns;

    @wire(getAccounts)
    wiredAccounts(result) {
        this.wireResult = result;
        if (result.data) {
            this.data = result.data;
        } else if (result.error) {
            this.error = result.error;
        }
    }


    callRowAction(event) {
        const recId = event.detail.row.Id;
        const actionName = event.detail.action.name;
        if (actionName === 'Edit') {
            this.handleAction(recId, 'edit');
        } else if (actionName === 'Delete') {
            this.handleDeleteRow(recId);
        } else if (actionName === 'View') {
            this.handleAction(recId, 'view');
        }
    }


    handleAction(recordId, mode) {
        this[NavigationMixin.Navigate]({
            type: 'standard__recordPage',
            attributes: {
                recordId: recordId,
                objectApiName: 'Account',
                actionName: mode
            }
        })
    }


}  
```


Show data in datatable

```

const columns = [
    { label: 'Invoice No', fieldName: 'Name', initialWidth: 100 },
    { label: 'Amount', fieldName: 'Amount__c', initialWidth: 100},
    { label: 'Status', fieldName: 'Status__c' , initialWidth: 100},
    { label: 'Account Name', fieldName: 'Accountname', initialWidth: 150 },
    { label: 'Utility Provider Name', fieldName: 'UtilityProviderName', initialWidth: 150 },
    { label: 'Created DateTime', fieldName: 'Created_Date__c', initialWidth: 200 },
    { label: 'Due DateTime', fieldName: 'Due_Date__c' , initialWidth: 200},
    {
        type: "button", initialWidth: 160, typeAttributes: {
            label: 'Mark As paid',
            disabled: false,
            value: 'view',
            iconPosition: 'left',
           // iconName:'utility:preview',
            variant:'Brand'
        }
    }
];



export default class UtilityPage extends LightningElement {
    columns = columns;
    
    connectedCallback() {
        this.fetchUtilityBill();
    }


    @track Storebilldata = [];


    
  fetchUtilityBill() {
    getutilitybill()
        .then(result => {
            // console.log(result);
            
            this.Storebilldata = result.map(item => ({
                ...item,
                Accountname: item.Flat__r.Name,
                UtilityProviderName: item.Utility_Provider__r.Name,
            }));

        })
        .catch(error => {
            console.error("Error fetching utility bill:", error);
        });
}
````


```
 showmaintenreqdata() {
    returndatamaintreq()
        .then((result) => {
            // console.log(result)
            this.Storemaintdata = result.map(item => ({
          ...item,
                    Assignedto: item.Assigned_to__r ? item.Assigned_to__r.Name : '',
                    requestedby: item.Requested_By__r ? item.Requested_By__r.Name : '',
                    societyname: item.Society__r ? item.Society__r.Name : '',
                    flatname: item.Flat__r ? item.Flat__r.Name : ''
            }));
            console.log(this.Storemaintdata);
    })
    .catch((error) => {
        alert(error.body.message);
    });

    }
```

